package com.advanz.erp.masters.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.advanz.erp.common.service.template.AdvanzErpServiceTemplate;
import com.advanz.erp.common.service.template.IAdvanzErpServiceTemplate;
import com.advanz.erp.masters.entity.jpa.SalaryNoteEntity;
import com.advanz.erp.masters.model.SalaryNoteDTO;
import com.advanz.erp.masters.model.msg.SalaryNoteInputMessage;
import com.advanz.erp.masters.model.msg.SalaryNoteOutputMessage;
import com.advanz.erp.masters.service.business.ISalaryNoteService;
import com.advanz.erp.masters.storage.IStorageSalaryNoteDAO;
@Service
public class SalaryNoteServiceImpl implements ISalaryNoteService{
	
	@Autowired
	private IStorageSalaryNoteDAO iStorageSalaryNoteDAO; 
	private static final String FIND_ALL_SALARY_NOTE="findAllSalaryNote";
	private static final String FIND_AUTO_GENERATE_NOTE_ID="findAutoGenerateNoteId";
	private static final String CREATE_SALARY_NOTE="createSalaryNote";
	private static final String FIND_BY_NOTE_ID="findByNoteID";
	private static final String REMOVE_SALARY_NOTE="removeSalaryNote";
	private static final String SEARCH_SALARY_NOTE="searchSalaryNote";
	private static final String UPDATE_SALARY_NOTE="updateSalaryNote";
	
	String flowId="";
	
	IAdvanzErpServiceTemplate advanzErpServiceTemplate=new AdvanzErpServiceTemplate();
	
	public SalaryNoteOutputMessage salaryNoteOutputMessage=new SalaryNoteOutputMessage();

	public SalaryNoteInputMessage salaryNoteInputMessage; 
	
	
	@Override
	public SalaryNoteOutputMessage loadSalaryNote() {
		flowId=FIND_ALL_SALARY_NOTE;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}
	
	@Override
	public SalaryNoteOutputMessage autoGeneratedNoteID() {
		flowId=FIND_AUTO_GENERATE_NOTE_ID;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}
	
	@Override
	public SalaryNoteOutputMessage createSalaryNote(SalaryNoteInputMessage salaryNoteInputMessage) {
		flowId=CREATE_SALARY_NOTE;
		this.salaryNoteInputMessage=salaryNoteInputMessage;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}

	@Override
	public SalaryNoteOutputMessage findByNoteID(SalaryNoteInputMessage salaryNoteInputMessage) {
		flowId=FIND_BY_NOTE_ID;
		this.salaryNoteInputMessage=salaryNoteInputMessage;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}
	
	@Override
	public SalaryNoteOutputMessage removeNote(SalaryNoteInputMessage salaryNoteInputMessage) {
		flowId=REMOVE_SALARY_NOTE;
		this.salaryNoteInputMessage=salaryNoteInputMessage;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}

	@Override
	public SalaryNoteOutputMessage searchNote(SalaryNoteInputMessage salaryNoteInputMessage) {
		flowId=SEARCH_SALARY_NOTE;
		this.salaryNoteInputMessage=salaryNoteInputMessage;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}

	@Override
	public SalaryNoteOutputMessage updateSalaryNote(SalaryNoteInputMessage salaryNoteInputMessage) {
		flowId=UPDATE_SALARY_NOTE;
		this.salaryNoteInputMessage=salaryNoteInputMessage;
		advanzErpServiceTemplate.execute(this);
		return salaryNoteOutputMessage;
	}
	
	@Override
	public void performBusinessLogic() {
		SalaryNoteDTO salaryNoteDTO=null;
		SalaryNoteEntity salaryNoteEntity=new SalaryNoteEntity();
	if(salaryNoteInputMessage!=null)
	 {	
		salaryNoteDTO=salaryNoteInputMessage.getSalaryNoteDTO();
		if(salaryNoteDTO!=null)
		{
			BeanUtils.copyProperties(salaryNoteDTO, salaryNoteEntity);
		}
	 }
	
	if(FIND_ALL_SALARY_NOTE.equals(flowId))
	  {
		List<SalaryNoteEntity> entityList=iStorageSalaryNoteDAO.loadSalaryNote();
		List<SalaryNoteDTO> dtoList=convertEntityToDTO(entityList);
		salaryNoteOutputMessage.setSalaryNoteDTOList(dtoList);
	  }
	
	 if(FIND_AUTO_GENERATE_NOTE_ID.equals(flowId))
	 	{
		  Integer noteId=iStorageSalaryNoteDAO.getNoteID();
		  salaryNoteDTO= new SalaryNoteDTO();
		  salaryNoteDTO.setNoteId(noteId);
		  salaryNoteOutputMessage.setSalaryNoteDTO(salaryNoteDTO);
	 	}
	 
	 if(CREATE_SALARY_NOTE.equals(flowId))
	  {
		iStorageSalaryNoteDAO.create(salaryNoteEntity);
		salaryNoteOutputMessage.setErrorListDTO(null);
	  }
	 if(FIND_BY_NOTE_ID.equals(flowId))
	  {
		List<SalaryNoteEntity> entityList= iStorageSalaryNoteDAO.findByNoteID(salaryNoteDTO.getNoteId());
		List<SalaryNoteDTO> dtoList=convertEntityToDTO(entityList);
		salaryNoteOutputMessage.setSalaryNoteDTOList(dtoList);
	  }
	 if(REMOVE_SALARY_NOTE.equals(flowId))
	 {
		 System.out.println("Note Service remove................."+salaryNoteEntity.getNoteId());
		 iStorageSalaryNoteDAO.delete(salaryNoteEntity);
		 salaryNoteOutputMessage.setErrorListDTO(null);
	 }
	 if(SEARCH_SALARY_NOTE.equals(flowId))
	 {
		 List<SalaryNoteEntity> entList=  iStorageSalaryNoteDAO.search(salaryNoteDTO.getNoteDate(),salaryNoteDTO.getStatus());
		 List<SalaryNoteDTO> listDto=convertEntityToDTO(entList);
		 salaryNoteOutputMessage.setSalaryNoteDTOList(listDto);
	  }
	 if(UPDATE_SALARY_NOTE.equals(flowId))
	 {
		 List<SalaryNoteEntity> entList=  iStorageSalaryNoteDAO.findByNoteIDEmpID(salaryNoteDTO.getNoteId(),salaryNoteDTO.getAssignToEmp());
		 if(entList!=null && entList.size()>0)
		 {
			 SalaryNoteEntity noteEntity=entList.get(0);
		 	 noteEntity.setDeletedFlag(false);
			 noteEntity.setModifiedUserId(salaryNoteEntity.getModifiedUserId());
			 noteEntity.setAssignToEmp(salaryNoteEntity.getAssignToEmp());
			 noteEntity.setNoteId(salaryNoteEntity.getNoteId());
			 noteEntity.setNoteDate(salaryNoteEntity.getNoteDate());
			 noteEntity.setSalaryNote(salaryNoteEntity.getSalaryNote());
			 noteEntity.setStatus(salaryNoteEntity.getStatus());
		   iStorageSalaryNoteDAO.update(noteEntity);
		 }
		 else
		 {
			 salaryNoteEntity.setSno(null);
			 iStorageSalaryNoteDAO.create(salaryNoteEntity);
		 }
		   salaryNoteOutputMessage.setErrorListDTO(null);
	  }
	 }

	
	@Override
	public boolean validateInput() {
		if(FIND_ALL_SALARY_NOTE.equals(flowId))
		{
			return true;
		}
		if(FIND_AUTO_GENERATE_NOTE_ID.equals(flowId))
		{
			return true;
		}
		if(CREATE_SALARY_NOTE.equals(flowId))
		{
			return true;
		}
		if(FIND_BY_NOTE_ID.equals(flowId))
		{
			return true;
		}
		if(REMOVE_SALARY_NOTE.equals(flowId))
		{
			return true;
		}
		if(SEARCH_SALARY_NOTE.equals(flowId))
		{
			return true;
		}
		if(UPDATE_SALARY_NOTE.equals(flowId))
		{
			return true;
		}
		return false;
	}
	
	
	@Override
	public void formatOutput() {
		// TODO Auto-generated method stub
	}
	
	
	public List<SalaryNoteDTO> convertEntityToDTO(List<SalaryNoteEntity> entityList)
	{
	SalaryNoteDTO salaryNoteDTO;
	List<SalaryNoteDTO> noteDTOList=new ArrayList<SalaryNoteDTO>();
	 for(SalaryNoteEntity entity:entityList)
		{
			salaryNoteDTO=new SalaryNoteDTO();
			BeanUtils.copyProperties(entity, salaryNoteDTO);
			noteDTOList.add(salaryNoteDTO);
		}
	 	return noteDTOList;
	}

	
}
